<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Loading</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            background-color: #1F2157;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            margin: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
        }

        h1 {
            margin-top: 40px;
            font-size: 2.5em;
        }

        h2 {
            margin-bottom: 40px;
            font-weight: normal;
            font-size: 1.5em;
        }

        /* プログレスリングのコンテナ */
        .progress-ring-container {
            position: relative;
            width: 200px;
            height: 200px;
        }

        /* SVGでプログレスリングを作成 */
        .progress-ring {
            transform: rotate(-90deg);
        }

        .progress-ring__circle {
            stroke: #333366;
            stroke-width: 8;
            fill: transparent;
        }

        .progress-ring__progress {
            stroke: url(#gradient);
            stroke-width: 8;
            fill: transparent;
            stroke-dasharray: 565.48;
            stroke-dashoffset: 565.48;
            stroke-linecap: round;
            transition: stroke-dashoffset 0.5s ease;
        }

        /* 中央のテキスト */
        .progress-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.2em;
            color: #feb47b;
        }

        /* アニメーション効果 */
        @keyframes pulse {
            0% {
                opacity: 0.6;
            }
            50% {
                opacity: 1;
            }
            100% {
                opacity: 0.6;
            }
        }

        .loading-dots {
            animation: pulse 1.5s infinite;
        }
    </style>
</head>
<body>
    <h2>ストレス解析</h2>
    
    <div class="progress-ring-container">
        <svg class="progress-ring" width="200" height="200">
            <defs>
                <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#ff7e5f;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#feb47b;stop-opacity:1" />
                </linearGradient>
            </defs>
            <circle class="progress-ring__circle" cx="100" cy="100" r="90"></circle>
            <circle class="progress-ring__progress" cx="100" cy="100" r="90"></circle>
        </svg>
        <div class="progress-text loading-dots">解析中...</div>
    </div>

    <h1>EmoTrack</h1>

    <script>
        $(document).ready(function() {
            const progressCircle = document.querySelector('.progress-ring__progress');
            const circumference = 2 * Math.PI * 90; // 円周
            const estimatedTime = 75000; // 75秒（1分15秒）
            const holdbackPoint = 0.95; // 95%で止める
            let progress = 0;
            let isCompleted = false;
            let animationInterval;

            // 進捗を更新する関数
            function setProgress(percent) {
                const offset = circumference - (percent / 100) * circumference;
                progressCircle.style.strokeDashoffset = offset;
            }

            // アニメーションを開始
            function startProgressAnimation() {
                const startTime = Date.now();
                
                animationInterval = setInterval(() => {
                    if (isCompleted) {
                        // completedの場合、100%まで進めて遷移
                        clearInterval(animationInterval);
                        setProgress(100);
                        setTimeout(() => {
                            window.location.href = '/result';
                        }, 500);
                        return;
                    }

                    const elapsed = Date.now() - startTime;
                    const targetProgress = (elapsed / estimatedTime) * 100;

                    // 95%で止める
                    if (targetProgress >= holdbackPoint * 100) {
                        progress = holdbackPoint * 100;
                    } else {
                        progress = targetProgress;
                    }

                    setProgress(progress);
                }, 100); // 100msごとに更新
            }

            // 結果をチェックする関数
            function checkResult() {
                $.ajax({
                    url: '/check_result',
                    method: 'GET',
                    dataType: 'json',
                    success: function(data) {
                        console.log(data);
                        console.log(data.status);
                        if (data.status === 'completed') {
                            isCompleted = true;
                            clearInterval(pollingInterval);
                        } else {
                            console.log("yet");
                        }
                    },
                    error: function() {
                        console.log("error");
                    }
                });
            }

            // 初期状態を設定
            setProgress(0);

            // プログレスアニメーションを開始
            startProgressAnimation();

            // ポーリングを開始
            var pollingInterval = setInterval(checkResult, 5000);
        });
    </script>
</body>
</html>