<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>感情入力 - EmoTrack</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />
  <style>
    body {
      background-color: #1f2157;
      margin: 0;
      font-family: sans-serif;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .container {
      padding: 20px;
      flex: 1;
      display: flex;
      flex-direction: column;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      color: white;
      margin-bottom: 30px;
    }

    .back-button {
      background: none;
      border: none;
      color: white;
      cursor: pointer;
      padding: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .back-button:active {
      opacity: 0.7;
    }

    .question {
      color: white;
      font-size: 20px;
      text-align: center;
      margin: 20px 0 40px 0;
      margin-top:-15px;
      line-height: 1.5;
    }

    .emotion-grid {
      display: flex;
      flex-direction: column;
      gap: 20px;
      margin-bottom: 40px;
    }

    .category {
      background-color: #35376c;
      border-radius: 15px;
      padding: 20px;
      transition: all 0.3s ease;
    }

    .category-header {
      color: white;
      font-size: 16px;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .category-icon {
      font-size: 24px;
    }

    .negative .category-icon {
       color: #00bfff;
    }

    .positive .category-icon {
       color: #ff7e5f;
    }

    .emotions-list {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
    }

    .emotion-button {
      background-color: rgba(255, 255, 255, 0.1);
      border: 2px solid transparent;
      border-radius: 10px;
      padding: 12px 16px;
      color: white;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.3s ease;
      text-align: center;
    }

    .emotion-button:hover {
      background-color: rgba(255, 255, 255, 0.2);
      transform: translateY(-2px);
    }

    .emotion-button:active {
      transform: translateY(0);
    }

    .emotion-button.selected {
      border-color: white;
      background-color: rgba(255, 255, 255, 0.25);
      box-shadow: 0 0 15px rgba(255, 255, 255, 0.3);
    }

    .negative .emotion-button.selected {
       background: linear-gradient(135deg, rgba(0, 191, 255, 0.3), rgba(126, 211, 255, 0.3));
      border-color: #00bfff;
    }

    .positive .emotion-button.selected {
        background: linear-gradient(135deg, rgba(255, 126, 95, 0.3), rgba(254, 180, 123, 0.3));
      border-color: #ff7e5f;
    }

    .action-buttons {
      margin-top: -10px;
      padding-top: -5px;
      
    }

    .next-button {
      width: 100%;
      background: linear-gradient(135deg, #ff7e5f, #feb47b);
      border: none;
      border-radius: 25px;
      padding: 15px;
      color: white;
      font-size: 18px;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      opacity: 0.5;
      pointer-events: none;
    }

    .next-button.active {
      opacity: 1;
      pointer-events: auto;
    }

    .next-button.active:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(255, 126, 95, 0.4);
    }

    .next-button.active:active {
      transform: translateY(0);
    }

    /* アニメーション */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .category {
      animation: fadeIn 0.5s ease-out;
    }

    .category:nth-child(2) {
      animation-delay: 0.1s;
    }

    /* レスポンシブ対応 */
    @media (max-width: 320px) {
      .emotions-list {
        grid-template-columns: 1fr;
      }
    }
      .error-message {
      background-color: rgba(255, 126, 95, 0.2);
      border-left: 4px solid #ff7e5f;
      color: white;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
      display: none;
    }

    .error-message.show {
      display: block;
    }
  </style>
</head>
<body>
  <div class="container">
    <% if @error.present? %>
      <div class="error-message show">
        <%= @error %>
      </div>
    <% end %>
    <div class="header">
      <button class="back-button" onclick="history.back()">
        <span class="material-symbols-outlined" style="font-size: 28px;">arrow_back</span>
      </button>
      <h2>①感情を記録</h2>
      <div style="width: 28px;"></div>
    </div>

    <p class="question">今日は、どんな感情でしたか？</p>

    <div class="emotion-grid">
        
         <div class="category positive">
        <div class="category-header">
          <span class="material-symbols-outlined category-icon"> sentiment_satisfied</span>
          <span>ポジティブな感情</span>
        </div>
        <div class="emotions-list">
         <button class="emotion-button" data-emotion="平穏">平穏</button>
          <button class="emotion-button" data-emotion="楽しい">楽しい</button>
          <button class="emotion-button" data-emotion="嬉しい">嬉しい</button>
         <button class="emotion-button" data-emotion="達成感">達成感</button>
          
        </div>
      </div>
      <div class="category negative">
        <div class="category-header">
          <span class="material-symbols-outlined category-icon">sentiment_dissatisfied</span>
          <span>ネガティブな感情</span>
        </div>
        <div class="emotions-list">
          
        
         <button class="emotion-button" data-emotion="不安">不安</button>
          <button class="emotion-button" data-emotion="悲しい">悲しい</button>
          <button class="emotion-button" data-emotion="怒り">怒り</button>
            <button class="emotion-button" data-emotion="恥">恥</button>
             
        </div>
      </div>

     
    </div>

    <div class="action-buttons">
      <button class="next-button" id="nextButton">次へ</button>
    </div>
  </div>

  <script>
    let selectedEmotion = null;
    const emotionButtons = document.querySelectorAll('.emotion-button');
    const nextButton = document.getElementById('nextButton');

    emotionButtons.forEach(button => {
      button.addEventListener('click', function() {
        // 既存の選択を解除
        emotionButtons.forEach(btn => btn.classList.remove('selected'));
        
        // 新しい選択を追加
        this.classList.add('selected');
        selectedEmotion = this.getAttribute('data-emotion');
        
        // 次へボタンを有効化
        nextButton.classList.add('active');
      });
    });

    nextButton.addEventListener('click', function() {
      if (selectedEmotion) {
        // 選択された感情を保存（実際の実装では適切な処理に置き換える）
        console.log('選択された感情:', selectedEmotion);
        
        // 次の画面へ遷移
        window.location.href = '/create?emotion=' + encodeURIComponent(selectedEmotion);
      }
    });

    // タッチフィードバック
    emotionButtons.forEach(button => {
      button.addEventListener('touchstart', function() {
        this.style.transform = 'scale(0.95)';
      });
      
      button.addEventListener('touchend', function() {
        this.style.transform = 'scale(1)';
      });
    });
  </script>
</body>
</html>